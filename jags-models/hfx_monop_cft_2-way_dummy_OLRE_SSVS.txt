
    model{
#1. PRIORS

  #1B. Diffuse uniform prior sigma 
    sigma ~ dunif(0, 20)
    tau  <- 1 / (sigma * sigma) 
  
  #1C. Priors random effects
    for (i in 1:n_cln) { a_cln[i] ~ dnorm(0, tau_cln) }

    # observation-level random effect
   # for (i in 1:n) {olre[i] ~ dnorm(0, tau_OLRE)}
  
  #1D. Diffuse uniform prior for random effect sigmas
    tau_cln  <- 1 / (sigma_cln * sigma_cln)
    sigma_cln ~ dunif(0, 20)

  #1F. Diffuse uniform hyperpriors for beta sigma
      tau_beta <- 1 / (sigma_beta * sigma_beta)
      sigma_beta ~ dunif(0, 20)

  #1G. Diffuse uniform hyperpriors for OLRE sigma
 #     tau_OLRE <- 1 / (sigma_OLRE * sigma_OLRE)
#      sigma_OLRE ~ dunif(0, 20)

  sd_bet ~ dunif(0, 100)
  tau_in <- pow(sd_bet, -2)
  tau[1] <- tau_in            # coef effectively zero
  tau[2] <- tau_in / 10    # nonzero coef
  p_ind[1] <- 1/2
  p_ind[2] <- 1 - p_ind[1]

  # for (j in 1:n_beta){
  # 
  #   indA[j] ~ dcat(p_ind[]) # returns 1 or 2
  #   ind[j] <- indA[j] - 1   # returns 0 or 1
  #   beta[j] ~ dnorm(0, tau[indA[j]])
  # 
  # }


    indA[1] ~ dcat(p_ind[]) # returns 1 or 2
    ind[1] <- indA[1] - 1   # returns 0 or 1
    beta[1] ~ dnorm(0, tau[indA[1]])

    indA[2] ~ dcat(p_ind[]) # returns 1 or 2
    ind[2] <- indA[2] - 1   # returns 0 or 1
    beta[2] ~ dnorm(0, tau[indA[2]])

    indA[3] ~ dcat(p_ind[]) # returns 1 or 2
    ind[3] <- indA[3] - 1   # returns 0 or 1
    beta[3] ~ dnorm(0, tau[indA[3]])
    beta[4] ~ dnorm(0, tau[indA[3]])

    indA[4] ~ dcat(p_ind[]) # returns 1 or 2
    ind[4] <- indA[4] - 1   # returns 0 or 1
    beta[5] ~ dnorm(0, tau[indA[4]])
    beta[6] ~ dnorm(0, tau[indA[4]])

######################## 
#2. LIKELIHOOD

  for (i in 1:n) {

    med[i]   ~ dbin(Pi[i], trials[i]) # Binomial

    eta[i] <- beta[1] +                     # covariates
              beta[2] * temp[i] + 
              beta[3] * c.t[i] + 
              beta[4] * f.t[i] +
              beta[5] * temp[i] * c.t[i] +
              beta[6] * temp[i] * f.t[i]

    logit(Pi[i])  <- eta[i]  + a_cln[cln[i]] #+ olre[i] # covariates + random effects

    #logit(Pi2[i]) <- eta[i]  + a_cln[cln[i]]
  }

    #3. Expectes values Y, variance Y, Pearson residuals
    for (i in 1:n) { 

       cfu.m[i] <- Pi[i] * trials[i]
       cfu.v[i] <-  trials[i] - cfu.m[i]
       cfu.a[i] <- cfu.m[i] + cfu.v[i]
       
       var.m[i] <- cfu.m[i] * (1 - Pi[i])

       e[i]    <- (med[i]  - cfu.m[i]) / sqrt(var.m[i])    
    } 
    
    #Simulate data with mean/variance taken from the fitted model
    for (i in 1:n) {
       YNew[i] ~  dbin(Pi[i], trials[i])                    
       ENew[i] <- (YNew[i] - cfu.m[i]) / sqrt(var.m[i])       
       D[i]    <- pow(e[i], 2)                      
       DNew[i] <- pow(ENew[i], 2)   
    }    

#Sum of squared Pearson residuals for observed and new data 

    fit    <- sum(D[1:n])
    fit.new <- sum(DNew[1:n])

# Log-Likelihood

  for (i in 1:n) {loglik[i] <- logdensity.bin(med[i], Pi[i], trials[i])}

# ICC 
  
  var.e <- sd(e) ^ 2
  var.a_cln <- sd(a_cln) ^ 2
  icc.cln <- var.a_cln / (var.a_cln + var.e)

# Predictions 

mu42F <- ilogit(beta[1] +                     # covariates
         beta[2] * -.5 + 
         beta[3] * 0 + 
         beta[4] * 1 +
         beta[5] * -.5 * 0 +
         beta[6] * -.5 * 1)

mu42C <- ilogit(beta[1] +                     # covariates
         beta[2] * -.5 + 
         beta[3] * 1 + 
         beta[4] * 0 +
         beta[5] * -.5 * 1 +
         beta[6] * -.5 * 0)

mu42T <- ilogit(beta[1] +                     # covariates
         beta[2] * -.5 + 
         beta[3] * 0 + 
         beta[4] * 0 +
         beta[5] * -.5 * 0 +
         beta[6] * -.5 * 0)

mu48F <- ilogit(beta[1] +                     # covariates
         beta[2] * .5 + 
         beta[3] * 0 + 
         beta[4] * 1 +
         beta[5] * .5 * 0 +
         beta[6] * .5 * 1)

mu48C <- ilogit(beta[1] +                     # covariates
         beta[2] * .5 + 
         beta[3] * 1 + 
         beta[4] * 0 +
         beta[5] * .5 * 1 +
         beta[6] * .5 * 0)

mu48T <- ilogit(beta[1] +                     # covariates
         beta[2] * .5 + 
         beta[3] * 0 + 
         beta[4] * 0 +
         beta[5] * .5 * 0 +
         beta[6] * .5 * 0)

# differences

d42C.48C <- mu42C - mu48C
d42C.42F <- mu42C - mu42F
d42C.48F <- mu42C - mu48F
d42C.42T <- mu42C - mu42T
d42C.48T <- mu42C - mu48T

d48C.42F <- mu48C - mu42F
d48C.48F <- mu48C - mu48F
d48C.42T <- mu48C - mu42T
d48C.48T <- mu48C - mu48T

d42F.48F <- mu42F - mu48F
d42F.42T <- mu42F - mu42T
d42F.48T <- mu42F - mu48T

d48F.42T <- mu48F - mu42T
d48F.48T <- mu48F - mu48T

d42T.48T <- mu42T - mu48T

}
    
