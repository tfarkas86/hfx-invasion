
    model{
#1. PRIORS

  #1A. Diffuse normal priors beta 
  # betas ~ N(0, 100^2)
    for (i in 1:n_beta) { 

      beta[i] ~ dnorm(0, tau_beta)

    }
  
  #1B. Diffuse uniform prior sigma 
    sigma ~ dunif(0, 20)
    tau  <- 1 / (sigma * sigma) 
  
  #1C. Priors random effects
    #for (i in 1:n_cln) { a_cln[i] ~ dnorm(0, tau_cln) }
  
  #1D. Diffuse uniform prior for random effect sigmas
    #tau_cln  <- 1 / (sigma_cln * sigma_cln)
    #sigma_cln ~ dunif(0, 20)

  #1F. Diffuse uniform hyperpriors for beta sigma
      tau_beta <- 1 / (sigma_beta * sigma_beta)
      sigma_beta ~ dunif(0, 20)


######################## 
#2. LIKELIHOOD

  for (i in 1:n) {

    med[i]   ~ dbin(Pi[i], trials[i]) # Binomial

    eta[i] <- beta[1] +                     # covariates
              beta[2] * temp[i] + 
              beta[3] * c.t[i] + 
              beta[4] * f.t[i] +
              beta[5] * temp[i] * c.t[i] +
              beta[6] * temp[i] * f.t[i]

    logit(mu[i])  <- eta[i]         # covariates + random effects
    
    Pi[i] ~ dbeta(a[i], b[i])
    a[i] <- mu[i]/theta
    b[i] <- (1 - mu[i])/theta

  }

theta ~ dunif(0.001, 5)

    #3. Expectes values Y, variance Y, Pearson residuals
    for (i in 1:n) {
      #Pi
       cfu.m.Pi[i] <- Pi[i] * trials[i]
       cfu.v.Pi[i] <-  trials[i] - cfu.m.Pi[i]
       cfu.a.Pi[i] <- cfu.m.Pi[i] + cfu.v.Pi[i]

       var.m.Pi[i] <- cfu.m.Pi[i] * (1 - Pi[i])

       e.Pi[i]    <- (med[i]  - cfu.m.Pi[i]) / sqrt(var.m.Pi[i])

      # mu
       cfu.m.mu[i] <- mu[i] * trials[i]
       cfu.v.mu[i] <-  trials[i] - cfu.m.mu[i]
       cfu.a.mu[i] <- cfu.m.mu[i] + cfu.v.mu[i]

       var.m.mu[i] <- cfu.m.mu[i] * (1 - mu[i])

       e.mu[i]    <- (med[i]  - cfu.m.mu[i]) / sqrt(var.m.mu[i])
    }

    #Simulate data with mean/variance taken from the fitted model
    for (i in 1:n) {
       YNew.Pi[i] ~  dbin(Pi[i], trials[i])
       ENew.Pi[i] <- (YNew.Pi[i] - cfu.m.Pi[i]) / sqrt(var.m.Pi[i])
       D.Pi[i]    <- pow(e.Pi[i], 2)
       DNew.Pi[i] <- pow(ENew.Pi[i], 2)
    }

    # mu
    for (i in 1:n) {
       YNew.mu[i] ~  dbin(mu[i], trials[i])
       ENew.mu[i] <- (YNew.mu[i] - cfu.m.mu[i]) / sqrt(var.m.mu[i])
       D.mu[i]    <- pow(e.mu[i], 2)
       DNew.mu[i] <- pow(ENew.mu[i], 2)
    }

#Sum of squared Pearson residuals for observed and new data

    fit.Pi    <- sum(D.Pi[1:n])
    fit.new.Pi <- sum(DNew.Pi[1:n])

    fit.mu    <- sum(D.mu[1:n])
    fit.new.mu <- sum(DNew.mu[1:n])

# Log-Likelihood

  for (i in 1:n) {loglik.Pi[i] <- logdensity.bin(med[i], Pi[i], trials[i])}
  for (i in 1:n) {loglik.mu[i] <- logdensity.bin(med[i], mu[i], trials[i])}

# ICC

  var.e.Pi <- sd(e.Pi) ^ 2
  var.e.mu <- sd(e.mu) ^ 2
  var.a_cln <- sd(a_cln) ^ 2
  icc.cln.Pi <- var.a_cln / (var.a_cln + var.e.mu)
  icc.cln.mu <- var.a_cln / (var.a_cln + var.e.mu)

# Predictions

mu42F <- ilogit(beta[1] +                     # covariates
         beta[2] * -.5 +
         beta[3] * 0 +
         beta[4] * 1 +
         beta[5] * -.5 * 0 +
         beta[6] * -.5 * 1)

mu42C <- ilogit(beta[1] +                     # covariates
         beta[2] * -.5 +
         beta[3] * 1 +
         beta[4] * 0 +
         beta[5] * -.5 * 1 +
         beta[6] * -.5 * 0)

mu42T <- ilogit(beta[1] +                     # covariates
         beta[2] * -.5 +
         beta[3] * 0 +
         beta[4] * 0 +
         beta[5] * -.5 * 0 +
         beta[6] * -.5 * 0)

mu48F <- ilogit(beta[1] +                     # covariates
         beta[2] * .5 +
         beta[3] * 0 +
         beta[4] * 1 +
         beta[5] * .5 * 0 +
         beta[6] * .5 * 1)

mu48C <- ilogit(beta[1] +                     # covariates
         beta[2] * .5 +
         beta[3] * 1 +
         beta[4] * 0 +
         beta[5] * .5 * 1 +
         beta[6] * .5 * 0)

mu48T <- ilogit(beta[1] +                     # covariates
         beta[2] * .5 +
         beta[3] * 0 +
         beta[4] * 0 +
         beta[5] * .5 * 0 +
         beta[6] * .5 * 0)

# differences

d42C.48C <- mu42C - mu48C
d42C.42F <- mu42C - mu42F
d42C.48F <- mu42C - mu48F
d42C.42T <- mu42C - mu42T
d42C.48T <- mu42C - mu48T

d48C.42F <- mu48C - mu42F
d48C.48F <- mu48C - mu48F
d48C.42T <- mu48C - mu42T
d48C.48T <- mu48C - mu48T

d42F.48F <- mu42F - mu48F
d42F.42T <- mu42F - mu42T
d42F.48T <- mu42F - mu48T

d48F.42T <- mu48F - mu42T
d48F.48T <- mu48F - mu48T

d42T.48T <- mu42T - mu48T

}
    
